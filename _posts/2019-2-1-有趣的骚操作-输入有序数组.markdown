---

layout:     post
title:      "输入有序数组"
subtitle:   " \"算法骚操作\""
date:       2019-02-01 10:54:00
author:     "BaiDong"
header-img: "img/post-bg-android.jpg"
catalog: true
tags:
    - 算法骚操作

---
给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。

函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。

说明:

        返回的下标值（index1 和 index2）不是从零开始的。
        你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。

示例:

        输入: numbers = [2, 7, 11, 15], target = 9
        输出: [1,2]
        解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。

题解:双指针

        我们使用两个指针，初始分别位于第一个元素和最后一个元素位置，比较这两个元素之和与目标值的大小。
        如果和等于目标值，我们发现了这个唯一解。如果比目标值小，我们将较小元素指针增加一。
        如果比目标值大，我们将较大指针减小一。移动指针后重复上述比较知道找到答案。

        假设 [... , a, b, c, ... , d, e, f, …][...,a,b,c,...,d,e,f,…] 是已经升序排列的输入数组，
        并且元素 b, eb,e 是唯一解。因为我们从左到右移动较小指针，从右到左移动较大指针，
        总有某个时刻存在一个指针移动到 bb 或 ee 的位置。不妨假设小指针县移动到了元素 bb ，
        这是两个元素的和一定比目标值大，根据我们的算法，我们会向左移动较大指针直至获得结果。

代码:

python3

        class Solution:
            def twoSum(self, numbers: List[int], target: int) -> List[int]:
                low= 0
                high =len(numbers)-1
                while(low<high):
                    sum = numbers[low]+numbers[high]
                    if sum ==target:
                        return [low+1,high+1]
                    elif sum<target:
                        low+=1
                    else:
                        high-=1
                return [-1,-1]

Go

        func twoSum(numbers []int, target int) []int {
            low := 0
            hight := len(numbers) - 1
            for low < hight {
                sum := numbers[low] + numbers[hight]
                if sum == target {
                    return []int{low + 1, hight + 1}
                } else if sum < target {
                    low++
                } else {
                    hight--
                }

            }
            return []int{-1, -1}
        }
