---

layout:     post
title:      "数据流的中位数"
subtitle:   " \"算法骚操作\""
date:       2019-06-01 18:39:00
author:     "BaiDong"
header-img: "img/home-bg-art.jpg"
catalog: true
tags:
    - 算法骚操作

---

中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。

例如，

    [2,3,4] 的中位数是 3

    [2,3] 的中位数是 (2 + 3) / 2 = 2.5

设计一个支持以下两种操作的数据结构：

    void addNum(int num) - 从数据流中添加一个整数到数据结构中。
    double findMedian() - 返回目前所有元素的中位数。



示例:

    addNum(1)
    addNum(2)
    findMedian() -> 1.5
    addNum(3) 
    findMedian() -> 2

题解:

    一种最容易想到的思路是，数据流新进来一个数，都把它与已经读出来的数进行一次排序，这样中位数就可以很容易得到。这样做“不好”的地方是：

    排序的时间复杂度为 O(N\log N)O(NlogN)，但事实上，我对除了中位数以外的其它位置的元素并不关心。

    事实上，我们只关心在中间的那两个数（或者一个数），其它数没有必要进行 “比较” 和 “交换” 的操作。

    在我们学习过的数据结构里，堆就有类似的性质，每次都从堆里得到一个 “最值” 而其它元素无需排序，这样就可以以 O(\log N)O(logN) 的复杂度每次都从堆中取出最值。
代码:
Python:

    import heapq
    
    class MedianFinder:

        def __init__(self):
            # 当前大顶堆和小顶堆的元素个数之和
            self.count = 0
            self.max_heap = []
            self.min_heap = []

        def addNum(self, num: int) -> None:
            self.count += 1
            # 因为 Python 中的堆默认是小顶堆，所以要传入一个 tuple，用于比较的元素需是相反数，
            # 才能模拟出大顶堆的效果
            heapq.heappush(self.max_heap, (-num, num))
            _, max_heap_top = heapq.heappop(self.max_heap)
            heapq.heappush(self.min_heap, max_heap_top)
            if self.count & 1:
                min_heap_top = heapq.heappop(self.min_heap)
                heapq.heappush(self.max_heap, (-min_heap_top, min_heap_top))

        def findMedian(self) -> float:
            if self.count & 1:
                # 如果两个堆合起来的元素个数是奇数，数据流的中位数大顶堆的堆顶元素
                return self.max_heap[0][1]
            else:
                # 如果两个堆合起来的元素个数是偶数，数据流的中位数就是各自堆顶元素的平均值
                return (self.min_heap[0] + self.max_heap[0][1]) / 2

        # Your MedianFinder object will be instantiated and called as such:
        # obj = MedianFinder()
        # obj.addNum(num)
        # param_2 = obj.findMedian()



