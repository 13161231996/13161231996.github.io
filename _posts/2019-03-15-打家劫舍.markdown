---

layout:     post
title:      "打家劫舍"
subtitle:   " \"算法骚操作\""
date:       2019-03-15 20:39:00
author:     "BaiDong"
header-img: "img/home-bg-art.jpg"
catalog: true
tags:
    - 算法骚操作

---
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

示例 1:

    输入: [1,2,3,1]
    输出: 4
    解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。偷窃到的最高金额 = 1 + 3 = 4 。

示例 2:

    输入: [2,7,9,3,1]
    输出: 12
    解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。偷窃到的最高金额 = 2 + 9 + 1 = 12 。


题解:动态规划

f(k) = 从前 k 个房屋中能抢劫到的最大数额，Ai= 第 i 个房屋的钱数。

首先看 n = 1 的情况，显然 f(1) = A1。

再看 n = 2，f(2) = max(A1, A2)。

对于 n = 3，有两个选项:

1.抢第三个房子，将数额与第一个房子相加。

2.只抢第二个房子。

显然，你想选择数额更大的选项。于是，可以总结出公式：

f(k) = max(f(k – 2)+Ak, f(k – 1))

代码:
python

    class Solution(object):
        def rob(self, nums):
            """
            :type nums: List[int]
            :rtype: int
            """
            last = 0 
            now = 0
            for i in nums: 
                #这是一个动态规划问题
                last, now = now, max(last + i, now)
            return now

Go

    func rob(nums []int) int {
        pre := 0
        cur := 0
        for _, values := range nums {
            pre,cur =cur, max(pre+values, cur)
        }
        return cur
    }

    func max(a, b int) int {
        if a > b {
            return a
        }
        return b
    }








