---

layout:     post
title:      "算法骚操作"
subtitle:   " \"厄拉多塞筛法\""
date:       2019-04-01 18:39:00
author:     "BaiDong"
header-img: "img/home-bg-art.jpg"
catalog: true
tags:
    - 算法骚操作

---
统计所有小于非负整数 n 的质数的数量。

示例:
    
    输入: 10
    输出: 4
    解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。

题解:

    比如说求20以内质数的个数,首先0,1不是质数.2是第一个质数,
    然后把20以内所有2的倍数划去.2后面紧跟的数即为下一个质数3,
    然后把3所有的倍数划去.3后面紧跟的数即为下一个质数5,
    再把5所有的倍数划去.以此类推.

代码:
python

    def countPrimes( n: int) -> int:
        if n<3:
            return 0
        else:
            output = [1]*n
            print(output)
            output[0],output[1] = 0,0
            print(int(n**0.5)+1)
            for i in range(2,int(n**0.5)+1):
                if output[i] ==1:
                    output[i*i:n:i] = [0]*len(output[i*i:n:i])
                    print(output[i*i:n:i])
        return sum(output)

Go

    func coun(n int) int {
        if n < 3 {
            return 0
        }
        nums := make([]bool, n)
        fmt.Println(nums)
        cnt := 0
        for i := 2; i < n; i++ {
            if !nums[i] {
                cnt++
                for j := i; j < n; j += i {
                    nums[j] = true
                }
            }
        }
        return cnt

    }

