---

layout:     post
title:      "算法骚操作"
subtitle:   " \"生命游戏\""
date:       2019-06-15 18:39:00
author:     "BaiDong"
header-img: "img/home-bg-art.jpg"
catalog: true
tags:
    - 算法骚操作

---

根据百度百科，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。

    给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞具有一个初始状态 live（1）即为活细胞， 或 dead（0）即为死细胞。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：

    如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
    如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
    如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
    如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
    根据当前状态，写一个函数来计算面板上细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。

示例:

    输入: 
    [
      [0,1,0],
      [0,0,1],
      [1,1,1],
      [0,0,0]
    ]
    输出: 
    [
      [0,0,0],
      [1,0,1],
      [0,1,1],
      [0,1,0]
    ]

题解:

    简单直白，完全按照题目解释做了两个循环。第一个循环用于标记，第二个循环用于赋值。
    1——保持1
    -1——1转0
    0——保持0
    -2——0转1

代码:
Python:

    class Solution(object):
        def gameOfLife(self, board):
            """
            :type board: List[List[int]]
            :rtype: None Do not return anything, modify board in-place instead.
            """
            if not board or not board[0]:
                return
            m = len(board)
            n = len(board[0])
            delta = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]
        def count(x, y):
            cnt = 0
            for dx, dy in delta:
                xx, yy = x + dx, y + dy
                if xx < 0 or xx >= m or yy < 0 or yy >= n:
                    continue
                cnt += board[xx][yy] & 1
                if cnt > 3:
                    break
            return cnt
            #位运算，新信息用高一位记录，0/1表示死活，初始为0，只需考虑周围有2或3个细胞的情况
            for x in range(m):
                for y in range(n):
                    c = count(x, y)
                    if c == 2: #保持细胞原来的状态
                        board[x][y] |= (board[x][y] & 1) << 1
                    elif c == 3: #置1
                        board[x][y] |= 2 #即 1 << 1 
            for x in range(m):
                for y in range(n):
                    board[x][y] >>= 1 #将高位移到低位，低位消失，高位恢复默认0



