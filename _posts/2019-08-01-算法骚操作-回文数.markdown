---

layout:     post
title:      "算法骚操作"
subtitle:   " \"回文数\""
date:       2019-08-01 18:39:00
author:     "BaiDong"
header-img: "img/home-bg-art.jpg"
catalog: true
tags:
    - 算法骚操作

---

判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

示例1:

    输入: 
    121
    输出: 
    true
示例2:

    输入:
    -121
    输出:
    false

题解:

    简单直白，完全按照题目解释做了两个循环。第一个循环用于标记，第二个循环用于赋值。
    1——保持1
    -1——1转0
    0——保持0
    -2——0转1
    映入脑海的第一个想法是将数字转换为字符串，并检查字符串是否为回文。但是，这需要额外的非常量空间来创建问题描述中所不允许的字符串。
    第二个想法是将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。
    但是，如果反转后的数字大于 int.MAX，我们将遇到整数溢出问题。
    按照第二个想法，为了避免数字反转可能导致的溢出问题，为什么不考虑只反转 int 数字的一半？毕竟，如果该数字是回文，其后半部分反转     后应该     与原始数字的前半部分相同。
    对于数字 1221，如果执行 1221 % 10，我们将得到最后一位数字 1，要得到倒数第二位数字，我们可以先通过除以 10 把最后一位数字从 1221 中移除，     1221 / 10 = 122，再求出上一步结果除以 10 的余数，122 % 10 = 2，就可以得到倒数第二位数字。如果我们把最后一位数字乘以 10，再加上倒数第二     位数字，1 * 10 + 2 = 12，就得到了我们想要的反转后的数字。如果继续这个过程，我们将得到更多位数的反转数字。

    

代码:
Python:

    class Solution:
        def reverse(self, x: int) -> int:
            # 特殊情况：
            # 如上所述，当 x < 0 时，x 不是回文数。
            # 同样地，如果数字的最后一位是 0，为了使该数字为回文，
            # 则其第一位数字也应该是 0
            # 只有 0 满足这一属性
            if x < 0 or x % 10 == 0 and x != 0:
                return False            
            reverted = 0
            while x> reverted:
                reverted = reverted*10+x%10
                x//=10
                print(reverted,x)
            return x==reverted or x == reverted//10
            # 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。
            # 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，
            # 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。
         
复杂度:
    
    时间复杂度：O(log10(n)),对于每次迭代，会输入除以10，因此时间复杂度为O(log10(n)).
    空间复杂度：O(1).



